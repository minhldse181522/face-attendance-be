generator client {
  provider = "prisma-client-js"
  engineType = "library"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// From dt_role.prisma

// From dt_role.prisma

// From dt_form.prisma

// From dt.form_description.prisma

// From dt.form_description.prisma

// From dt.form_description.prisma

// From dt.form_description.prisma

// From dt.form_description.prisma

// From dt_branch.prisma

// From dt_branch.prisma

// From dt_branch.prisma

// From dt_branch.prisma

// From dt_branch.prisma

// From dt_branch.prisma

// From dt_branch.prisma

// From dt_branch.prisma

// From dt_branch.prisma

// From dt_branch.prisma

// From dt_branch.prisma

// From dt_branch.prisma

// From dt_branch.prisma

// From dt_branch.prisma

// From dt_branch.prisma

// From dt_branch.prisma

// From dt_branch.prisma

// From dt_branch.prisma

// From dt_branch.prisma

// From dt_branch.prisma

// From dt_branch.prisma

// From dt_branch.prisma

// From dt_branch.prisma

// From dt_branch.prisma

// From dt_branch.prisma

// From dt_branch.prisma

// From dt_branch.prisma

// From dt_branch.prisma

// From dt_branch.prisma

// From dt_branch.prisma

// From dt_branch.prisma

// From dt_branch.prisma

// From dt_branch.prisma

// From dt_branch.prisma

// From dt_branch.prisma

// From dt_branch.prisma

// From dt_branch.prisma

// From dt_branch.prisma

// From dt_branch.prisma

// From dt_branch.prisma

// From dt_branch.prisma

// From dt_branch.prisma

// From dt_branch.prisma

// From dt_branch.prisma

// From dt_branch.prisma

// From dt_branch.prisma

// From dt_branch.prisma

// From dt_branch.prisma

// From dt_branch.prisma

// From dt_branch.prisma

// From dt_branch.prisma

// From dt_branch.prisma

// From dt_branch.prisma

// From dt_branch.prisma

// From dt_branch.prisma

// From dt_branch.prisma
model Branch {
  id           BigInt  @id @default(autoincrement())

  code         String  @unique @map("code") @db.VarChar(50)
  branchName   String  @map("branch_name") @db.VarChar(200)
  addressLine  String  @map("address_line") @db.VarChar(200)
  placeId      String  @map("place_id") @db.VarChar(200)
  city         String  @map("city") @db.VarChar(50)
  district     String  @map("district") @db.VarChar(50)
  lat          Float   @map("lat") @db.DoublePrecision
  long         Float   @map("long") @db.DoublePrecision
  companyCode  String  @map("company_code") @db.VarChar(20)

  createdAt DateTime? @default(now()) @map("created_date") @db.Timestamptz(3)
  createdBy String    @map("created_by") @db.VarChar(36)
  updatedAt DateTime? @updatedAt @map("modified_date") @db.Timestamptz(3)
  updatedBy String?   @map("modified_by") @db.VarChar(36)

  userBranches UserBranch[]
  workingSchedules WorkingSchedule[]

  @@map("dt_branch")
}

// From dt_face_reference.prisma
model FaceReference {
  id             BigInt  @id @default(autoincrement())

  code           String    @unique @map("code") @db.VarChar(50)
  faceImg        String    @map("face_img") @db.VarChar(200)
  userCode       String    @map("user_code") @db.VarChar(50)

  createdAt     DateTime? @default(now()) @map("created_date") @db.Timestamptz(3)
  createdBy     String    @map("created_by") @db.VarChar(36)
  updatedAt     DateTime? @updatedAt @map("modified_date") @db.Timestamptz(3)
  updatedBy     String?   @map("modified_by") @db.VarChar(36)

  user   User   @relation(fields: [userCode], references: [code], onUpdate: Cascade)

  @@map("dt_face_reference")
}

// From dt_form.prisma
model Form {
  id BigInt @id @default(autoincrement())

  title        String    @db.VarChar(100)
  description  String?   @db.Text
  roleCode     String    @map("role_code") @db.VarChar(5)
  
  createdAt DateTime? @default(now()) @map("created_date") @db.Timestamptz(3)
  createdBy String    @map("created_by") @db.VarChar(36)
  updatedAt DateTime? @updatedAt @map("modified_date") @db.Timestamptz(3)
  updatedBy String?   @map("modified_by") @db.VarChar(36)

  // Relation to Role
  role     Role     @relation(fields: [roleCode], references: [roleCode])
  formDescriptions FormDescription[]
  @@map("dt_form")
}

// From dt_form_description.prisma
model FormDescription {
  id BigInt @id @default(autoincrement())

  code           String    @unique @db.VarChar(50)
  reason         String    @db.Text
  response       String?   @db.VarChar(200)
  status         String    @db.VarChar(50)
  file           String?   @db.VarChar(200)
  startTime      DateTime  @map("start_time") @db.Timestamptz(3)
  endTime        DateTime  @map("end_time") @db.Timestamptz(3)
  approvedTime   DateTime? @map("approved_time") @db.Timestamptz(3)
  statusOvertime Boolean?  @map("status_overtime") @db.Boolean
  
  formId        BigInt   @map("form_id")
  submittedBy   String   @map("submitted_by") @db.VarChar(50)
  approvedBy    String?  @map("approved_by") @db.VarChar(50)

  createdAt     DateTime? @default(now()) @map("created_date") @db.Timestamptz(3)
  createdBy     String    @map("created_by") @db.VarChar(36)
  updatedAt     DateTime? @updatedAt @map("modified_date") @db.Timestamptz(3)
  updatedBy     String?   @map("modified_by") @db.VarChar(36)

  // Relations
  form          Form     @relation(fields: [formId], references: [id], onUpdate: Cascade)
  submitter     User     @relation("FormSubmitter", fields: [submittedBy], references: [code], onUpdate: Cascade)
  approver      User?    @relation("FormApprover", fields: [approvedBy], references: [code], onUpdate: Cascade)

  @@map("dt_form_description")
}

// From dt_payroll.prisma
model Payroll {
  id BigInt @id @default(autoincrement())

  code           String    @unique @map("code") @db.VarChar(50)
  userCode       String    @map("user_code") @db.VarChar(50)
  month          String    @map("month") @db.VarChar(5)
  baseSalary     Float     @map("base_salary") @db.DoublePrecision
  actualSalary   Float?    @map("actual_salary") @db.DoublePrecision
  totalWorkHour  Float?    @map("total_work_hour") @db.DoublePrecision
  status         String?   @map("status") @db.VarChar(20)
  paidDate       DateTime? @map("paid_date") @db.Timestamptz(3)
  deductionFee   Float?    @map("deduction_fee") @db.DoublePrecision
  workDay        Int       @map("work_day") @db.Integer
  allowance      Float     @map("allowance") @db.DoublePrecision
  overtimeSalary Float     @map("overtime_salary") @db.DoublePrecision
  salaryOvertime Float?    @map("salary_overtime") @db.DoublePrecision
  lateFine       Float     @map("late_fine") @db.DoublePrecision
  lateTimeCount  Int?      @map("late_time_count") @db.Integer
  otherFee       Float?    @map("other_fee") @db.DoublePrecision
  totalSalary    Float     @map("total_salary") @db.DoublePrecision
  
  createdAt DateTime? @default(now()) @map("created_date") @db.Timestamptz(3)
  createdBy String    @map("created_by") @db.VarChar(36)
  updatedAt DateTime? @updatedAt @map("modified_date") @db.Timestamptz(3)
  updatedBy String?   @map("modified_by") @db.VarChar(36)

  user      User    @relation(fields: [userCode], references: [code], onUpdate: Cascade)

  @@map("dt_payroll")
}

// From dt_position.prisma
model Position {
  id BigInt @id @default(autoincrement())

  code           String?   @unique @map("code") @db.VarChar(50)
  positionName   String?   @map("position_name") @db.VarChar(100)
  role           String    @map("role") @db.VarChar(5)
  description    String?   @map("description") @db.VarChar(200)
  baseSalary     Float?    @map("base_salary") @db.DoublePrecision
  allowance      Float?    @map("allowance") @db.DoublePrecision
  overtimeSalary Float?    @map("overtime_salary") @db.DoublePrecision
  lateFine       Float?    @map("late_fine") @db.DoublePrecision
  
  createdAt DateTime? @default(now()) @map("created_date") @db.Timestamptz(3)
  createdBy String    @map("created_by") @db.VarChar(36)
  updatedAt DateTime? @updatedAt @map("modified_date") @db.Timestamptz(3)
  updatedBy String?   @map("modified_by") @db.VarChar(36)

  rolePosition   Role    @relation(fields: [role], references: [roleCode], onUpdate: Cascade)

  userContracts  UserContract[]

  @@map("dt_position")
}

// From dt_role.prisma
model Role {
  id BigInt @id @default(autoincrement())

  roleCode    String   @unique @map("role_code") @db.VarChar(5)
  roleName    String   @map("role_name") @db.VarChar(20)

  createdAt DateTime? @default(now()) @map("created_date") @db.Timestamptz(3)
  createdBy String    @map("created_by") @db.VarChar(36)
  updatedAt DateTime? @updatedAt @map("modified_date") @db.Timestamptz(3)
  updatedBy String?   @map("modified_by") @db.VarChar(36)

  user      User[]
  forms     Form[]
  positions Position[]

  @@map("dt_role")
}

// From dt_shift.prisma
model Shift {
  id             BigInt  @id @default(autoincrement())

  code           String?    @unique @map("code") @db.VarChar(50)
  name           String?    @map("name") @db.VarChar(200)
  startTime      DateTime?  @map("start_time") @db.Timestamptz(0)
  endTime        DateTime?  @map("end_time") @db.Timestamptz(0)
  status         String     @default("ACTIVE") @map("status") @db.VarChar(10)
  lunchBreak     String?    @map("lunch_break") @db.VarChar(10)
  workingHours   Decimal?   @map("working_hours") @db.Decimal(10, 2)

  createdAt     DateTime? @default(now()) @map("created_date") @db.Timestamptz(3)
  createdBy     String    @map("created_by") @db.VarChar(36)
  updatedAt     DateTime? @updatedAt @map("modified_date") @db.Timestamptz(3)
  updatedBy     String?   @map("modified_by") @db.VarChar(36)

  workingSchedules   WorkingSchedule[]

  @@map("dt_shift")
}

// From dt_time_keeping.prisma
model TimeKeeping {
  id             BigInt  @id @default(autoincrement())

  code                String?    @unique @map("code") @db.VarChar(50)
  checkInTime         DateTime?  @map("check_in_time") @db.Timestamptz(0)
  checkOutTime        DateTime?  @map("check_out_time") @db.Timestamptz(0)
  workingHourReal     String?    @map("working_hour_real") @db.VarChar(20)
  date                DateTime?  @map("date") @db.Timestamptz(0)
  status              String?    @map("status") @db.VarChar(50)
  userCode            String?    @map("user_code") @db.VarChar(50)
  workingScheduleCode String?    @unique @map("working_schedule_code") @db.VarChar(50)

  createdAt     DateTime? @default(now()) @map("created_date") @db.Timestamptz(3)
  createdBy     String    @map("created_by") @db.VarChar(36)
  updatedAt     DateTime? @updatedAt @map("modified_date") @db.Timestamptz(3)
  updatedBy     String?   @map("modified_by") @db.VarChar(36)

  workingSchedule     WorkingSchedule? @relation("WorkingScheduleToTimeKeeping", fields: [workingScheduleCode], references: [code], onUpdate: Cascade)

  @@map("dt_time_keeping")
}

// From dt_user.prisma
model User {
  id BigInt @id @default(autoincrement())

  code         String   @unique @map("code") @db.VarChar(50)
  userName     String   @unique @map("user_name") @db.VarChar(50)
  password     String   @map("password") @db.VarChar(100)
  firstName    String   @map("first_name") @db.VarChar(20)
  lastName     String   @map("last_name") @db.VarChar(50)
  email        String   @map("email") @db.VarChar(50)
  faceImg      String?  @map("face_img") @db.VarChar(200)
  dob          DateTime @map("dob") @db.Timestamptz(3)
  gender       String   @map("gender") @db.VarChar(2)
  phone        String   @map("phone") @db.VarChar(10)
  typeOfWork   String?  @map("type_of_work") @db.VarChar(200)
  isActive     Boolean  @map("is_active") @default(true) @db.Boolean()
  roleCode     String   @map("role_code") @db.VarChar(5)
  addressCode  String?  @map("address_code") @db.VarChar(20)

  createdAt DateTime? @default(now()) @map("created_date") @db.Timestamptz(3)
  createdBy String    @map("created_by") @db.VarChar(36)
  updatedAt DateTime? @updatedAt @map("modified_date") @db.Timestamptz(3)
  updatedBy String?   @map("modified_by") @db.VarChar(36)

  role     Role      @relation(fields: [roleCode], references: [roleCode], onUpdate: Cascade)
  
  workingSchedules WorkingSchedule[]
  userContracts    UserContract[]
  managedContracts UserContract[] @relation("ManagedContracts")
  submittedForms   FormDescription[] @relation("FormSubmitter")
  approvedForms    FormDescription[] @relation("FormApprover")
  faceReference    FaceReference[]
  payroll          Payroll[]

  @@map("dt_user")
}

// From dt_user_branch.prisma
model UserBranch {
  id               BigInt  @id @default(autoincrement())

  code             String  @unique @map("code") @db.VarChar(50)
  branchCode       String  @map("branch_code") @db.VarChar(50)
  userContractCode String? @map("user_contract_code") @db.VarChar(50)

  createdAt     DateTime? @default(now()) @map("created_date") @db.Timestamptz(3)
  createdBy     String    @map("created_by") @db.VarChar(36)
  updatedAt     DateTime? @updatedAt @map("modified_date") @db.Timestamptz(3)
  updatedBy     String?   @map("modified_by") @db.VarChar(36)

  branch Branch?   @relation(fields: [branchCode], references: [code])
  userContract UserContract? @relation(fields: [userContractCode], references: [code])

  @@map("dt_user_branch")
}

// From dt_user_contract.prisma
model UserContract {
  id             BigInt  @id @default(autoincrement())

  code           String?    @unique @map("code") @db.VarChar(50)
  title          String?    @map("title") @db.VarChar(100)
  description    String?    @map("description") @db.VarChar(2000)
  startTime      DateTime?  @map("start_time") @db.Timestamptz(0)
  endTime        DateTime?  @map("end_time") @db.Timestamptz(0)
  duration       String?    @map("duration") @db.VarChar(50)
  contractPdf    String?    @map("contract_pdf") @db.VarChar(200)
  status         String?    @map("status") @db.VarChar(50)
  endDate        DateTime?  @map("end_date") @db.Timestamptz(0)
  userCode       String?    @map("user_code") @db.VarChar(200)
  managedBy      String?    @map("managed_by") @db.VarChar(50)
  positionCode   String?    @map("position_code") @db.VarChar(50)

  createdAt     DateTime? @default(now()) @map("created_date") @db.Timestamptz(3)
  createdBy     String    @map("created_by") @db.VarChar(36)
  updatedAt     DateTime? @updatedAt @map("modified_date") @db.Timestamptz(3)
  updatedBy     String?   @map("modified_by") @db.VarChar(36)

  user          User?     @relation(fields: [userCode], references: [code], onUpdate: Cascade)
  manager       User?     @relation("ManagedContracts", fields: [managedBy], references: [userName], onUpdate: Cascade)
  position      Position? @relation(fields: [positionCode], references: [code], onUpdate: Cascade)

  userBranches  UserBranch[]
  workingSchedules WorkingSchedule[]

  @@map("dt_user_contract")
}

// From dt_working_schedule.prisma
model WorkingSchedule {
  id             BigInt  @id @default(autoincrement())

  code              String?    @unique @map("code") @db.VarChar(50)
  userCode          String?    @map("user_code") @db.VarChar(200)
  userContractCode  String?    @map("user_contract_code") @db.VarChar(200)
  date              DateTime?  @map("date") @db.Timestamptz(0)
  shiftCode         String?    @map("shift_code") @db.VarChar(50)
  status            String?    @map("status") @db.VarChar(50)
  branchCode        String?    @map("branch_code") @db.VarChar(50)
  note              String?    @map("note") @db.VarChar(200)

  createdAt     DateTime? @default(now()) @map("created_date") @db.Timestamptz(3)
  createdBy     String    @map("created_by") @db.VarChar(36)
  updatedAt     DateTime? @updatedAt @map("modified_date") @db.Timestamptz(3)
  updatedBy     String?   @map("modified_by") @db.VarChar(36)

  user          User?         @relation(fields: [userCode], references: [code], onUpdate: Cascade)
  userContract  UserContract? @relation(fields: [userContractCode], references: [code], onUpdate: Cascade)
  shift         Shift?        @relation(fields: [shiftCode], references: [code], onUpdate: Cascade)
  branch        Branch?       @relation(fields: [branchCode], references: [code], onUpdate: Cascade)
  timeKeeping   TimeKeeping?  @relation("WorkingScheduleToTimeKeeping")

  @@map("dt_working_schedule")
}